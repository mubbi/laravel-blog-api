---
description: Cursor Rules for Laravel 12 Blog API Project for writing codes
globs:
alwaysApply: true
---

# Cursor Rules for Laravel 12 Blog API Project

## Project Overview

This is a modern Laravel 12 Blog API built with PHP 8.4, featuring clean architecture, comprehensive testing, Docker-based development environment, and advanced code quality tools. The API serves as a production-ready backend for a blog platform with authentication, role-based permissions, content management, and automated quality assurance.

## Technology Stack

- **Laravel Framework**: 12.0+ (latest features)
- **PHP**: 8.2+ (with strict typing enabled, targeting 8.4+ features)
- **Database**: MySQL 8.0 (development) + MySQL 8.0 (testing - isolated environment)
- **Cache/Session**: Redis (development) + Redis (testing - isolated environment)
- **Authentication**: Laravel Sanctum (API tokens with abilities)
- **Testing**: Pest PHP 3.8+ (BDD-style testing framework)
- **Static Analysis**: Larastan 3.0+ (PHPStan level 10 for Laravel)
- **Code Formatting**: Laravel Pint (PHP-CS-Fixer preset)
- **API Documentation**: Scramble (OpenAPI/Swagger automatic generation)
- **Containerization**: Docker & Docker Compose (multi-service architecture)
- **Quality Analysis**: SonarQube integration (optional)
- **Git Tools**: Husky hooks, semantic commits, automated validation

## PHP Coding Standards (MANDATORY)

### File Structure Requirements

- **ALWAYS** use `declare(strict_types=1);` at the top of all PHP files after the `<?php` starting tag
- Follow **PSR-12** coding standards strictly
- Use **descriptive, meaningful** names for variables, functions, classes, and files
- Include **comprehensive PHPDoc** for classes, methods, and complex logic
- Prefer **typed properties**, **typed function parameters**, and **typed return types**
- Break code into small, single-responsibility functions or classes
- Avoid magic numbers and hard-coded strings; use **constants**, **config files**, or **Enums**
- Use strict type declarations throughout

### PHP 8.4 Best Practices

- Use **readonly properties** to enforce immutability where appropriate
- Leverage **Enums** for clear, type-safe constants
- Use **First-class callable syntax** for cleaner callbacks
- Utilize **Constructor Property Promotion**
- Use **Union Types**, **Intersection Types**, **true/false return types**, and **Static Return Types**
- Apply the **Nullsafe Operator (?->)** for safe method/property access
- Use **Named Arguments** for clarity when calling functions with multiple parameters
- Prefer **final classes** for utility or domain-specific classes that shouldn't be extended
- Adopt **new `Override` attribute** (PHP 8.4) to explicitly mark overridden methods
- Use **dynamic class constants in Enums** where version-specific behavior is needed

### PHP 8.4 Override Attribute Example

```php
<?php

declare(strict_types=1);

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

final class YourModel extends Model
{
    #[Override]
    protected function casts(): array
    {
        return [
            'created_at' => 'datetime',
            'updated_at' => 'datetime',
        ];
    }
}
```

## Laravel 12 Project Structure & Conventions

### Directory Structure

```
app/
├── Actions/              # Single-responsibility action classes (create as needed)
├── Console/              # Artisan commands (create as needed)
├── Data/                 # Data Transfer Objects (DTOs) (create as needed)
├── Enums/                # Enums for type-safe constants ✅
├── Events/               # Domain events (create as needed)
├── Exceptions/           # Custom exceptions (create as needed)
├── Http/
│   ├── Controllers/      # Thin controllers ✅
│   ├── Middleware/       # HTTP middleware ✅
│   ├── Requests/         # Form Request validation ✅
│   ├── Resources/        # API Resource responses ✅
├── Jobs/                 # Queued jobs (create as needed)
├── Listeners/            # Event listeners (create as needed)
├── Models/               # Eloquent models ✅
├── Policies/             # Authorization policies ✅
├── Providers/            # Service providers ✅
├── Services/             # Business logic ✅
├── Support/              # Helpers & utility classes (create as needed)
└── Rules/                # Custom validation rules (create as needed)
```

### Domain Models

The application follows a blog-centric domain model with the following entities:

#### Core Entities

- **User**: Blog users with role-based permissions
- **Article**: Blog posts with status management
- **Category**: Hierarchical content organization
- **Tag**: Flexible content labeling
- **Comment**: User interactions on articles

#### Supporting Entities

- **Role**: User access levels (Administrator, Editor, Author, Contributor, Subscriber)
- **Permission**: Granular access control
- **Notification**: System-wide messaging
- **NewsletterSubscriber**: Email subscription management

### Enums (PHP 8.1+ Features)

All status and type fields use PHP enums for type safety:

- `UserRole`: User permission levels
- `ArticleStatus`: Article publication states
- `ArticleAuthorRole`: Multi-author support
- `NotificationType`: System notification types

## PHPStan Level 10 Compliance (CRITICAL)

### Type Safety Requirements

- **ALL** properties must have explicit type declarations
- **ALL** method parameters must have explicit type declarations
- **ALL** method return types must be explicitly declared
- **ALL** variables must have explicit type declarations where possible
- Use **Union Types** and **Intersection Types** appropriately
- Use **Generic Types** for collections and arrays
- Use **Template Types** for complex generic scenarios

### PHPDoc Requirements

- **ALL** classes must have comprehensive PHPDoc with `@property` annotations for all properties
- **ALL** methods must have PHPDoc with `@param` and `@return` annotations
- Use **@template** annotations for generic classes
- Use **@extends** and **@implements** annotations for inheritance
- Use **@mixin** annotations for traits and mixins
- Use **@var** annotations for complex variable types
- Use **@phpstan-*** annotations for PHPStan-specific directives

### Example PHPStan Level 10 Compliant Code

```php
<?php

declare(strict_types=1);

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

/**
 * @property int $id
 * @property string $title
 * @property string $slug
 * @property string|null $content
 * @property int $user_id
 * @property \Illuminate\Support\Carbon $created_at
 * @property \Illuminate\Support\Carbon $updated_at
 * @property-read User $user
 * @property-read \Illuminate\Database\Eloquent\Collection<int, Category> $categories
 * @mixin \Eloquent
 * @phpstan-use \Illuminate\Database\Eloquent\Factories\HasFactory<self>
 */
final class Article extends Model
{
    use HasFactory;

    protected $guarded = [];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'created_at' => 'datetime',
            'updated_at' => 'datetime',
        ];
    }

    /**
     * Get the user that owns the article.
     *
     * @return BelongsTo<User, Article>
     */
    public function user(): BelongsTo
    {
        /** @var BelongsTo<User, Article> $relation */
        $relation = $this->belongsTo(User::class);

        return $relation;
    }

    /**
     * Get the categories for the article.
     *
     * @return BelongsToMany<Category, Article, \Illuminate\Database\Eloquent\Relations\Pivot, 'pivot'>
     */
    public function categories(): BelongsToMany
    {
        /** @var BelongsToMany<Category, Article, \Illuminate\Database\Eloquent\Relations\Pivot, 'pivot'> $relation */
        $relation = $this->belongsToMany(Category::class);

        return $relation;
    }
}
```

## Controller Guidelines (MANDATORY)

### Single Action Controllers

Controllers must:

- Remain **thin**; business logic belongs in Services or Actions
- Use **dependency injection** with readonly properties
- Use **Form Requests** for validation
- Return **typed responses**, e.g., `JsonResponse`
- Use **Resource classes** for API responses
- Be **final classes** for immutability
- Use **invokable pattern** with `__invoke()` method

### Controller Template

```php
<?php

declare(strict_types=1);

namespace App\Http\Controllers\Api\V1\YourDomain;

use App\Http\Controllers\Controller;
use App\Http\Requests\V1\YourDomain\YourRequest;
use App\Http\Resources\V1\YourDomain\YourResource;
use App\Services\YourService;
use Dedoc\Scramble\Attributes\Group;
use Illuminate\Http\JsonResponse;
use Symfony\Component\HttpFoundation\Response;

#[Group('Your Domain', weight: 1)]
final class YourController extends Controller
{
    public function __construct(
        private readonly YourService $yourService
    ) {}

    /**
     * Your endpoint description
     *
     * @unauthenticated
     *
     * @response array{status: true, message: string, data: YourResource}
     */
    public function __invoke(YourRequest $request): JsonResponse
    {
        try {
            $result = $this->yourService->doSomething($request->withDefaults());

            return response()->apiSuccess(
                new YourResource($result),
                __('common.success')
            );
        } catch (\Throwable $e) {
            /**
             * Internal server error
             *
             * @status 500
             *
             * @body array{status: false, message: string, data: null, error: null}
             */
            return response()->apiError(
                __('common.something_went_wrong'),
                Response::HTTP_INTERNAL_SERVER_ERROR
            );
        }
    }
}
```

## Request Validation Guidelines

### Form Request Template

```php
<?php

declare(strict_types=1);

namespace App\Http\Requests\V1\YourDomain;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

/**
 * @property-read string $field1
 * @property-read int $field2
 */
final class YourRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true; // Or implement authorization logic
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'field1' => ['required', 'string', 'max:255'],
            'field2' => ['required', 'integer', 'min:1'],
            'enum_field' => [Rule::enum(YourEnum::class)],
            'array_field' => ['array'],
            'array_field.*' => ['string', 'exists:table,column'],
            'date_field' => ['date'],
            'email_field' => ['email', 'max:255'],
        ];
    }

    /**
     * Get the default values for missing parameters
     *
     * @return array<string, mixed>
     */
    public function withDefaults(): array
    {
        return array_merge([
            'default_field' => 'default_value',
            'page' => 1,
            'per_page' => 15,
        ], $this->validated());
    }
}
```

## Service Layer Guidelines

### Service Template

```php
<?php

declare(strict_types=1);

namespace App\Services;

use App\Services\Interfaces\YourServiceInterface;
use App\Models\YourModel;
use Illuminate\Database\Eloquent\Collection;

final class YourService implements YourServiceInterface
{
    /**
     * Do something with the data
     *
     * @param array<string, mixed> $data
     * @return YourModel
     */
    public function doSomething(array $data): YourModel
    {
        // Business logic here
        // Database operations
        // Return result
    }

    /**
     * Get a collection of items
     *
     * @param array<string, mixed> $params
     * @return Collection<int, YourModel>
     */
    public function getItems(array $params): Collection
    {
        // Implementation
    }
}
```

## Model Guidelines

### Model Template

```php
<?php

declare(strict_types=1);

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;

/**
 * @property int $id
 * @property string $name
 * @property string $email
 * @property string|null $email_verified_at
 * @property string $password
 * @property string|null $remember_token
 * @property \Illuminate\Support\Carbon $created_at
 * @property \Illuminate\Support\Carbon $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection<int, Role> $roles
 * @property-read \Illuminate\Database\Eloquent\Collection<int, Article> $articles
 * @mixin \Eloquent
 * @phpstan-use \Illuminate\Database\Eloquent\Factories\HasFactory<self>
 */
final class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    /**
     * Get the roles that belong to the user.
     *
     * @return BelongsToMany<Role, User, \Illuminate\Database\Eloquent\Relations\Pivot, 'pivot'>
     */
    public function roles(): BelongsToMany
    {
        /** @var BelongsToMany<Role, User, \Illuminate\Database\Eloquent\Relations\Pivot, 'pivot'> $relation */
        $relation = $this->belongsToMany(Role::class);

        return $relation;
    }

    /**
     * Get the articles for the user.
     *
     * @return HasMany<Article, User>
     */
    public function articles(): HasMany
    {
        /** @var HasMany<Article, User> $relation */
        $relation = $this->hasMany(Article::class);

        return $relation;
    }
}
```

## Resource Guidelines

### Resource Template

```php
<?php

declare(strict_types=1);

namespace App\Http\Resources\V1\YourDomain;

use App\Models\YourModel;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

/**
 * @property-read YourModel $resource
 */
class YourResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param Request $request
     * @return array<int|string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->resource->id,
            'name' => $this->resource->name,
            'email' => $this->resource->email,
            'related_data' => $this->whenLoaded('relation', function () {
                return new RelatedResource($this->resource->relation);
            }),
            $this->mergeWhen(
                array_key_exists('access_token', $this->resource->getAttributes()),
                fn () => [
                    'access_token' => $this->resource->getAttributes()['access_token'],
                    'token_type' => 'Bearer',
                ]
            ),
        ];
    }
}
```

## Enum Guidelines

### Enum Template

```php
<?php

declare(strict_types=1);

namespace App\Enums;

/**
 * User role enumeration
 */
enum UserRole: string
{
    case ADMINISTRATOR = 'administrator';
    case EDITOR = 'editor';
    case AUTHOR = 'author';
    case CONTRIBUTOR = 'contributor';
    case SUBSCRIBER = 'subscriber';

    /**
     * Get the display name for the role
     */
    public function displayName(): string
    {
        return match ($this) {
            self::ADMINISTRATOR => 'Administrator',
            self::EDITOR => 'Editor',
            self::AUTHOR => 'Author',
            self::CONTRIBUTOR => 'Contributor',
            self::SUBSCRIBER => 'Subscriber',
        };
    }
}
```

## Testing Guidelines

### Pest Test Template

```php
<?php

declare(strict_types=1);

use App\Models\User;
use App\Models\Article;

describe('API/V1/YourDomain/YourController', function () {
    it('can perform the expected action', function () {
        // Arrange
        $user = User::factory()->create();
        $article = Article::factory()->for($user, 'author')->create();

        // Act
        $response = $this->getJson(route('api.v1.your.endpoint'));

        // Assert
        $response->assertStatus(200)
            ->assertJsonStructure([
                'status',
                'message',
                'data' => [
                    'id',
                    'name',
                    // ... other fields
                ],
            ]);
    });

    it('returns 500 when operation fails with exception', function () {
        // Mock service to throw exception
        $this->mock(\App\Services\YourService::class, function ($mock) {
            $mock->shouldReceive('doSomething')
                ->andThrow(new \Exception('Operation failed'));
        });

        $response = $this->getJson(route('api.v1.your.endpoint'));

        $response->assertStatus(500)
            ->assertJson([
                'status' => false,
                'message' => __('common.something_went_wrong'),
                'data' => null,
                'error' => null,
            ]);
    });
});
```

## Development Workflow Commands

### Always Use Make Commands

```bash
# Setup
make local-setup          # Complete development environment setup
make sonarqube-setup     # Optional SonarQube setup

# Development
make commit              # Interactive semantic commits
make test                # Run test suite
make test-coverage       # Run tests with coverage (80% required)
make lint                # Code formatting with Pint
make analyze             # Static analysis with PHPStan level 10

# Container management
make docker-up           # Start containers
make docker-down         # Stop containers
make status              # Check container status
make health              # Check application health
make shell               # Access container shell
```

## Error Handling Guidelines

### Exception Handling Pattern

All controllers should follow this error handling pattern:

```php
try {
    $result = $this->yourService->doSomething($request->withDefaults());

    return response()->apiSuccess(
        new YourResource($result),
        __('common.success')
    );
} catch (\Throwable $e) {
    // Log the error for debugging
    \Log::error('Operation failed', [
        'message' => $e->getMessage(),
        'file' => $e->getFile(),
        'line' => $e->getLine(),
        'trace' => $e->getTraceAsString()
    ]);

    return response()->apiError(
        __('common.something_went_wrong'),
        Response::HTTP_INTERNAL_SERVER_ERROR
    );
}
```

### Custom Exception Classes

Create custom exceptions for domain-specific errors:

```php
<?php

declare(strict_types=1);

namespace App\Exceptions;

use Exception;

final class ArticleNotFoundException extends Exception
{
    public function __construct(int $articleId)
    {
        parent::__construct("Article with ID {$articleId} not found");
    }
}
```

## Security Best Practices

### Authentication & Authorization

- Use **Laravel Sanctum** for API authentication with Bearer tokens
- Implement **ability-based token permissions** for fine-grained access
- Use **role-based access control** with permissions
- Apply **least-privilege principles**
- Use **Form Request classes** for comprehensive validation
- Never trust user input; validate and sanitize all inputs

### API Security

- Use **CSRF, XSS, and validation protections**
- Store secrets in `.env`, never hard-coded
- Enforce authorization via **Policies or Gates**
- Use **Eloquent or Query Builder** to prevent SQL injection
- Implement **rate limiting** for APIs

## Performance & Optimization

### Database Optimization

- **Eager load relationships** to prevent N+1 queries
- Use **caching** for frequently accessed data
- **Paginate large datasets** with `paginate()`
- **Queue long-running tasks**
- **Optimize database indexes**
- Use **Redis for sessions and application cache**

### Query Optimization

- Use **Eloquent relationships** and eager loading
- Implement **proper indexing** and foreign key constraints
- Use **API Resource classes** for optimized JSON responses
- Apply **background processing** with supervisor-managed queue workers

## Code Quality Standards

### Quality Gates

- **Minimum 80% test coverage** enforced
- **PHPStan level 10** static analysis compliance
- **Laravel Pint** code formatting
- **Pest PHP** BDD-style testing
- **SonarQube integration** for comprehensive analysis

### Git Hooks & Automation

- **pre-commit**: Runs linting on changed files
- **pre-push**: Runs tests with PHPStan analysis
- **prepare-commit-msg**: Formats commit messages
- **Husky integration**: Node.js-based commit tools

## Semantic Commits

### Commit Message Format

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

**Valid types:** `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`, `perf`, `ci`, `build`, `revert`

**Examples:**

```bash
feat(api): add user registration endpoint
fix(auth): resolve token validation issue
docs: update API documentation
test(api): add integration tests for auth
```

## Environment Configuration

### Access Points

- **Main API**: <http://localhost:8081>
- **Health Check**: <http://localhost:8081/api/health>
- **API Documentation**: <http://localhost:8081/docs/api>
- **MySQL Development**: localhost:3306 (laravel_user/laravel_password)
- **Redis**: localhost:6379
- **MySQL Test**: localhost:3307 (separate test database)
- **Redis Test**: localhost:6380 (separate test cache)
- **SonarQube Dashboard**: <http://localhost:9000> (when started)

### Current Project Status

- **PHP Version**: 8.2+ (composer.json requirement)
- **Laravel Version**: 12.0+ (latest)
- **PHPStan Level**: 10 (configured in phpstan.neon)
- **Testing Framework**: Pest PHP 3.8+
- **Code Quality**: Laravel Pint + PHPStan + SonarQube
- **Containerization**: Docker Compose with isolated test environment
- **Git Workflow**: Semantic commits with Husky hooks

### Project-Specific Features

- **Multi-author Articles**: Support for multiple authors per article
- **Role-based Access Control**: 5 user roles with granular permissions
- **Article Status Management**: Draft, Review, Published, Archived states
- **Comment System**: User interactions on articles
- **Newsletter Integration**: Email subscription management
- **Notification System**: System-wide messaging with audience targeting
- **API Versioning**: All endpoints under `/api/v1/`
- **Comprehensive Testing**: 80%+ coverage requirement

## Troubleshooting

### Common Commands

```bash
make help                # Show all available commands
make health              # Check application health
make logs                # View container logs
make docker-cleanup      # Clean up everything
```

### Quality Assurance

- Always run `make test` before committing
- Always run `make lint` to ensure code formatting
- Always run `make analyze` for static analysis
- Use `make commit` for guided semantic commits
- Maintain 80%+ test coverage at all times

## IMPORTANT REMINDERS

1. **ALWAYS** use `declare(strict_types=1);` at the top of every PHP file
2. **ALWAYS** use **final classes** for immutability
3. **ALWAYS** use **strict typing** for all properties and methods
4. **ALWAYS** use **comprehensive PHPDoc** annotations
5. **ALWAYS** use **service layer** for business logic
6. **ALWAYS** use **Form Requests** for validation
7. **ALWAYS** use **API Resources** for responses
8. **ALWAYS** use **Enums** for type-safe constants
9. **ALWAYS** use **Make commands** for all operations
10. **ALWAYS** maintain **PHPStan level 10** compliance
11. **ALWAYS** maintain **80% test coverage**
12. **ALWAYS** use **semantic commits** with `make commit`

## Project-Specific Patterns

### Response Format

All API responses must follow this structure:

```json
{
    "status": true,
    "message": "Success message",
    "data": {
        // Response data
    }
}
```

### Error Response Format

```json
{
    "status": false,
    "message": "Error message",
    "data": null,
    "error": null
}
```

### API Versioning

- All routes must be prefixed with `/api/v1/`
- Use proper HTTP status codes (200, 201, 204, 400, 422, 500, etc.)
- Use RESTful conventions with proper HTTP methods

### Database Relationships

- Use proper **foreign key constraints**
- Implement **soft deletes** where appropriate
- Use **pivot tables** for many-to-many relationships
- Apply **database indexes** for frequently queried fields

This project follows **modern Laravel 12 best practices** with a focus on **type safety**, **clean architecture**, and **comprehensive quality assurance**. All code must adhere to these standards for consistency and maintainability.
