#!/bin/sh

echo "Running Pint on changed files..."

# Get the list of PHP files that are about to be committed
FILES=$(git diff --cached --name-only --diff-filter=ACM -- "*.php")

# Run Pint on the PHP files

# Iterate through the list of files and add them to the staging area one by one
for FILE in $FILES; do
  ./vendor/bin/pint $FILE
  git add "$FILE"
done

echo "Pint done..."

# Run PHPStan on whole project
echo "Running PHPStan on whole project..."
./vendor/bin/phpstan analyse --memory-limit=2G
if [ $? -ne 0 ]; then
  echo "PHPStan found errors. Aborting the commit."
  exit 1
fi
echo "PHPStan passed!"

# Function to setup test environment in existing container
setup_test_environment() {
    echo "Setting up test environment in existing container..."
    cd containers
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test composer install --no-interaction --prefer-dist --optimize-autoloader
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test bash -c "cp .env.testing.docker .env"
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test php artisan config:clear
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test php artisan cache:clear
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test php artisan key:generate --force
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test php artisan migrate:fresh --seed
    cd ..
}

# Run fast parallel tests for quick feedback during commit
echo "Running parallel tests for quick feedback..."

# Always use Docker test environment - set it up if not running
if docker ps --format "table {{.Names}}" | grep -q "laravel_blog_api_test"; then
    echo "Docker test container detected..."

    # Check if container is healthy and has proper environment
    if docker inspect laravel_blog_api_test --format='{{.State.Health.Status}}' 2>/dev/null | grep -q "healthy"; then
        echo "Container is healthy, checking if environment is set up..."
        # Quick check to see if basic Laravel setup is working
        cd containers
        if docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test test -f .env; then
            echo "Using existing Docker test environment..."
            cd ..
        else
            echo "Environment not set up, configuring..."
            cd ..
            setup_test_environment
        fi
    else
        echo "Container not healthy, setting up environment..."
        setup_test_environment
    fi
else
    echo "Setting up Docker test environment..."
    cd containers
    docker-compose -f docker-compose.test.yml up -d
    echo "Waiting for containers to be healthy..."
    timeout 120 bash -c '
        while ! docker inspect laravel_blog_api_mysql_test --format="{{.State.Health.Status}}" 2>/dev/null | grep -q "healthy"; do
            echo "Waiting for MySQL to be healthy..."
            sleep 5
        done
        echo "MySQL is healthy!"
    '
    if [ $? -ne 0 ]; then
        echo "ERROR: MySQL failed to become healthy"
        exit 1
    fi
    cd ..
    setup_test_environment
fi

# Run fast parallel tests (no coverage threshold check)
PARALLEL_TEST_COMMAND="docker-compose -f containers/docker-compose.test.yml exec -T laravel_blog_api_test php artisan test --parallel --recreate-databases --stop-on-failure"

echo "Running fast parallel tests..."
$PARALLEL_TEST_COMMAND

if [ $? -ne 0 ]; then
  echo "Parallel tests failed. Aborting the commit."
  exit 1
fi

echo "All pre-commit checks passed!"
exit 0
