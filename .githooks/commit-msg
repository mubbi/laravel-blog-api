#!/bin/sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "${YELLOW}üîç Validating commit message format...${NC}"

# Check if commitlint is available
if ! command -v npx > /dev/null 2>&1; then
    echo "${RED}‚ùå Node.js/npm not available. Please install Node.js to validate commit messages.${NC}"
    exit 1
fi

# Check if this is a merge commit
if [ -f .git/MERGE_HEAD ]; then
    echo "${GREEN}‚úÖ Merge commit detected, skipping validation${NC}"
    exit 0
fi

# Read the commit message
COMMIT_MSG_FILE="$1"
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Skip empty commits
if [ -z "$COMMIT_MSG" ] || [ "$COMMIT_MSG" = "" ]; then
    echo "${RED}‚ùå Empty commit message${NC}"
    exit 1
fi

# Run commitlint
echo "$COMMIT_MSG" | npx commitlint
COMMITLINT_EXIT_CODE=$?

if [ $COMMITLINT_EXIT_CODE -ne 0 ]; then
    echo ""
    echo "${RED}‚ùå Commit message does not follow conventional commit format!${NC}"
    echo ""
    echo "${YELLOW}Expected format:${NC}"
    echo "  ${GREEN}type(scope): description${NC}"
    echo ""
    echo "${YELLOW}Valid types:${NC}"
    echo "  feat:     A new feature"
    echo "  fix:      A bug fix"
    echo "  docs:     Documentation only changes"
    echo "  style:    Changes that do not affect the meaning of the code"
    echo "  refactor: A code change that neither fixes a bug nor adds a feature"
    echo "  test:     Adding missing tests or correcting existing tests"
    echo "  chore:    Changes to the build process or auxiliary tools"
    echo "  perf:     A code change that improves performance"
    echo "  ci:       Changes to CI configuration files and scripts"
    echo "  build:    Changes that affect the build system"
    echo "  revert:   Reverts a previous commit"
    echo ""
    echo "${YELLOW}Examples:${NC}"
    echo "  ${GREEN}feat(auth): add user authentication${NC}"
    echo "  ${GREEN}fix(api): resolve validation error in user endpoint${NC}"
    echo "  ${GREEN}docs: update API documentation${NC}"
    echo ""
    echo "${YELLOW}üí° Use '${GREEN}npm run commit${NC}${YELLOW}' or '${GREEN}make commit${NC}${YELLOW}' for interactive commit creation!${NC}"
    exit 1
fi

echo "${GREEN}‚úÖ Commit message format is valid${NC}"
exit 0
