#!/bin/sh

# This script runs Laravel PHPUnit tests with coverage analysis before pushing to the remote repository.
# Note: We run sequential tests here (no --parallel) so that coverage aggregation works properly with --min=80

# Function to setup test environment in existing container
setup_test_environment() {
    echo "Setting up test environment in existing container..."
    cd containers
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test composer install --no-interaction --prefer-dist --optimize-autoloader
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test bash -c "cp .env.testing.docker .env"
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test php artisan config:clear
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test php artisan cache:clear
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test php artisan key:generate --force
    docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test php artisan migrate:fresh --seed
    cd ..
}

# Always use Docker test environment - set it up if not running
if docker ps --format "table {{.Names}}" | grep -q "laravel_blog_api_test"; then
    echo "Docker test container detected..."

    # Check if container is healthy and has proper environment
    if docker inspect laravel_blog_api_test --format='{{.State.Health.Status}}' 2>/dev/null | grep -q "healthy"; then
        echo "Container is healthy, checking if environment is set up..."
        # Quick check to see if basic Laravel setup is working
        cd containers
        if docker-compose -f docker-compose.test.yml exec -T laravel_blog_api_test test -f .env; then
            echo "Using existing Docker test environment..."
            cd ..
        else
            echo "Environment not set up, configuring..."
            cd ..
            setup_test_environment
        fi
    else
        echo "Container not healthy, setting up environment..."
        setup_test_environment
    fi
else
    echo "Setting up Docker test environment..."
    cd containers
    docker-compose -f docker-compose.test.yml up -d
    echo "Waiting for containers to be healthy..."
    timeout 120 bash -c '
        while ! docker inspect laravel_blog_api_mysql_test --format="{{.State.Health.Status}}" 2>/dev/null | grep -q "healthy"; do
            echo "Waiting for MySQL to be healthy..."
            sleep 5
        done
        echo "MySQL is healthy!"
    '
    if [ $? -ne 0 ]; then
        echo "ERROR: MySQL failed to become healthy"
        exit 1
    fi
    cd ..
    setup_test_environment
fi

# Run sequential tests with coverage and minimum threshold (no --parallel for proper coverage aggregation)
TEST_COMMAND="docker-compose -f containers/docker-compose.test.yml exec -T laravel_blog_api_test php artisan test --coverage --coverage-html reports/coverage --coverage-clover reports/coverage.xml --stop-on-failure"

# Run tests with coverage analysis
echo "Running tests with coverage analysis and minimum 80% threshold..."
TEST_OUTPUT=$($TEST_COMMAND 2>&1)
TEST_EXIT_CODE=$?

# Display the test output
echo "$TEST_OUTPUT"

# Check if tests failed first
if [ $TEST_EXIT_CODE -ne 0 ]; then
  echo "Tests failed. Aborting the push."
  exit 1
fi

# Extract coverage percentage from the output
COVERAGE=$(echo "$TEST_OUTPUT" | grep -o "Total: [0-9]*\.[0-9]*" | grep -o "[0-9]*\.[0-9]*")

if [ -z "$COVERAGE" ]; then
  echo "Could not determine coverage percentage. Aborting the push."
  exit 1
fi

# Convert coverage to integer for comparison (remove decimal point)
# Example: 42.1 becomes 421, 80.0 becomes 800
COVERAGE_INT=$(echo "$COVERAGE" | sed 's/\.//')
MIN_COVERAGE_INT=800  # 80.0 with decimal removed

# Add trailing zero if needed (e.g., 42.1 -> 421, but 42 -> 420)
COVERAGE_LEN=${#COVERAGE_INT}
if [ $COVERAGE_LEN -eq 2 ]; then
  COVERAGE_INT="${COVERAGE_INT}0"
fi

echo "Coverage: ${COVERAGE}%"
echo "Required: 80.0%"

if [ "$COVERAGE_INT" -lt "$MIN_COVERAGE_INT" ]; then
  echo "ERROR: Coverage ${COVERAGE}% is below the required 80% threshold. Aborting the push."
  exit 1
fi

echo "All checks passed with â‰¥80% coverage. Proceeding with the push."
exit 0
