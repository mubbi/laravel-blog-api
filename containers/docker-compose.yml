name: laravel_blog

services:
  # Laravel App with Nginx + PHP-FPM
  laravel_blog_api:
    build:
      context: .
      dockerfile: php/Dockerfile
    container_name: laravel_blog_api
    restart: unless-stopped
    working_dir: /var/www/html
    tty: true
    stdin_open: true
    volumes:
      - ../:/var/www/html
      - ./php/php.ini:/usr/local/etc/php/conf.d/custom.ini
      - ./php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ./nginx/default.conf:/etc/nginx/sites-available/default
    ports:
      - "8081:80"
      - "8001:8001" # xdebug port
    environment:
      - XDEBUG_MODE=${XDEBUG_MODE:-off}
      - XDEBUG_CONFIG=client_host=host.docker.internal client_port=9003
    command: /usr/local/bin/start-main-app.sh
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: |
        # Check if ready marker exists and HTTP endpoint is accessible
        if [ -f /var/www/html/storage/laravel_ready ]; then
          curl -f http://localhost:80/api/health -H "Accept: application/json" >/dev/null 2>&1
        else
          exit 1
        fi
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 300s  # Give 5 minutes for initial setup (composer, migrations, seeders)
    networks:
      - laravel_blog_api_network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: laravel_blog_api_mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: laravel_blog
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: laravel_user
      MYSQL_PASSWORD: laravel_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - laravel_blog_api_network

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: laravel_blog_api_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - laravel_blog_api_network

  # Laravel Queue Worker
  queue_worker:
    build:
      context: .
      dockerfile: php/Dockerfile
    container_name: laravel_blog_api_queue
    restart: unless-stopped
    working_dir: /var/www/html
    tty: true
    stdin_open: true
    volumes:
      - ../:/var/www/html
      - ./php/php.ini:/usr/local/etc/php/conf.d/custom.ini
    command: /usr/local/bin/start-queue-worker.sh
    depends_on:
      laravel_blog_api:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "[ -f /var/www/html/storage/laravel_ready ] && grep -q queue:work /proc/*/cmdline"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s  # Give 1 minute for queue worker startup since main app is already ready
    networks:
      - laravel_blog_api_network

networks:
  laravel_blog_api_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
